{
    "General": [
        {
            "name": "inject",
            "backgroundColor": "#B2B2B2",
            "inputHandles": 0,
            "outputHandles": 1,
            "icon": "inject.svg",
            "supportedGraphTypes": [
                "Flow"
            ],
            "description": "Inject a message in a graph manually or periodically with timeout or cron job. The payload can include different data types, including string, number, array or json object."
        },
        {
            "name": "debug",
            "backgroundColor": "#018D20",
            "inputHandles": 1,
            "outputHandles": 0,
            "icon": "info.svg",
            "supportedGraphTypes": [
                "Flow",
                "Connector",
                "Component"
            ],
            "description": "Display properties of the input message in the debug console."
        },
        {
            "name": "info",
            "backgroundColor": "#00C9D6",
            "inputHandles": 1,
            "outputHandles": 0,
            "icon": "info.svg",
            "supportedGraphTypes": [
                "Flow",
                "Connector",
                "Component"
            ],
            "description": "Display properties of the input message in the info console and trigger an info alert to the user."
        },
        {
            "name": "success",
            "backgroundColor": "#00bd2a",
            "inputHandles": 1,
            "outputHandles": 0,
            "icon": "success.svg",
            "supportedGraphTypes": [
                "Flow",
                "Connector",
                "Component"
            ],
            "description": "Display properties of the input message in the success console and trigger an success alert to the user."
        },
        {
            "name": "warning",
            "backgroundColor": "#E3B50F",
            "inputHandles": 1,
            "outputHandles": 0,
            "icon": "warning.svg",
            "supportedGraphTypes": [
                "Flow",
                "Connector",
                "Component"
            ],
            "description": "Display properties of the input message in the warning console and trigger an warning alert to the user. By default the warning will close automaticaly and won't need an acknowledgment from the user."
        },
        {
            "name": "error",
            "backgroundColor": "#C51919",
            "inputHandles": 1,
            "outputHandles": 0,
            "icon": "error.svg",
            "supportedGraphTypes": [
                "Flow",
                "Connector",
                "Component"
            ],
            "description": "Display properties of the input message in the error console and trigger an error alert to the user. By default the error will close automaticaly and won't need an acknowledgment from the user."
        }
    ],
    "Functions": [
        {
            "name": "function",
            "backgroundColor": "#FF7A00",
            "inputHandles": 1,
            "outputHandles": 1,
            "icon": "function.svg",
            "supportedGraphTypes": [
                "Flow",
                "Connector",
                "Component"
            ],
            "description": "A javascript method to execute on messages received by the node. The function is supposted to return an object containing the payload to send to the next node. The function node can access and store environment variable."
        },
        {
            "name": "switch",
            "backgroundColor": "#FFE500",
            "inputHandles": 1,
            "outputHandles": 1,
            "icon": "switch.svg",
            "supportedGraphTypes": [
                "Flow",
                "Connector",
                "Component"
            ],
            "description": "Forward messages depending of the value of a property or their position in a sequence. When a message arrive the node will evaluate each of the defined rules in order to forward the message to corresponding output. Optionaly, the node can be configured to stop evaluating rules if one matches the condition. Rules can be evaluated in regard to a property of the received message, or using environment variable."
        },
        {
            "name": "change",
            "backgroundColor": "#FFE500",
            "inputHandles": 1,
            "outputHandles": 1,
            "icon": "change.svg",
            "supportedGraphTypes": [
                "Flow",
                "Connector",
                "Component"
            ],
            "description": "Define, modify, remove, or move the property from the payload. The node can specify multiple rules that will be applied depending of the order of definition."
        },
        {
            "name": "range",
            "backgroundColor": "#FFE500",
            "inputHandles": 1,
            "outputHandles": 1,
            "icon": "range.svg",
            "supportedGraphTypes": [
                "Flow",
                "Connector",
                "Component"
            ],
            "description": "Lineary scale the provided value in regard of the defined scale. The input number MUST be a number."
        },
        {
            "name": "template",
            "backgroundColor": "#FF7A00",
            "inputHandles": 1,
            "outputHandles": 1,
            "icon": "templates.svg",
            "supportedGraphTypes": [
                "Flow",
                "Connector",
                "Component"
            ],
            "description": "Define a property based on the provided model. It output the defined model updated with provided property"
        },
        {
            "name": "delay",
            "backgroundColor": "#EE83FF",
            "inputHandles": 1,
            "outputHandles": 1,
            "icon": "delay.svg",
            "supportedGraphTypes": [
                "Flow",
                "Connector",
                "Component"
            ],
            "description": "Define a delay in to apply to the message. The delay can be randomly be defined."
        },
        {
            "name": "filter",
            "backgroundColor": "#FFE500",
            "inputHandles": 1,
            "outputHandles": 1,
            "icon": "filter.svg",
            "supportedGraphTypes": [
                "Flow",
                "Connector",
                "Component"
            ],
            "description": "Cache received data, and emit on the next node only if one value of the payload has changed since the previously received message. If the node trigger, it will forward the input of the previous node."
        }
    ],
    "ROS2": [
        {
            "name": "publisher",
            "backgroundColor": "#FF0000",
            "inputHandles": 1,
            "outputHandles": 0,
            "icon": "ros.svg",
            "supportedGraphTypes": [
                "Flow",
                "Connector",
                "Component"
            ],
            "description": "Triggers an event when a message is received on the defined ROS2 topic."
        },
        {
            "name": "subscriber",
            "backgroundColor": "#FF0000",
            "inputHandles": 0,
            "outputHandles": 1,
            "icon": "ros.svg",
            "supportedGraphTypes": [
                "Flow",
                "Connector",
                "Component"
            ],
            "description": "Publish a payload in the specified ROS2 topic."
        },
        {
            "name": "service",
            "backgroundColor": "#FF0000",
            "inputHandles": 1,
            "outputHandles": 1,
            "icon": "ros.svg",
            "supportedGraphTypes": [
                "Flow",
                "Connector",
                "Component"
            ],
            "description": "Send the payload in the specified ROS2 service, and await for a response to be forwarded in the output."
        },
        {
            "name": "action",
            "backgroundColor": "#FF0000",
            "inputHandles": 1,
            "outputHandles": 2,
            "icon": "ros.svg",
            "supportedGraphTypes": [
                "Flow",
                "Connector",
                "Component"
            ],
            "description": "Send the request in the specified action. The node has two output, one for the progress and another one for the result."
        }
    ],
    "Controllers": [
        {
            "name": "base controller",
            "backgroundColor": "#BD00FF",
            "inputHandles": 0,
            "outputHandles": 1,
            "icon": "component.svg",
            "supportedGraphTypes": [
                "Connector"
            ],
            "description": "This node implements the IBaseController interface that describes the event that will be triggered when a UI component that implements this connector is getting interacted by the user."
        },
        {
            "name": "RTC camera",
            "backgroundColor": "#BD00FF",
            "inputHandles": 1,
            "outputHandles": 0,
            "icon": "component.svg",
            "supportedGraphTypes": [
                "Connector"
            ],
            "description": "This node will attempt to negociate a RTCPeerConnection with the given host. If the connection succeed, the camera will render images."
        },
        {
            "name": "camera frame",
            "backgroundColor": "#BD00FF",
            "inputHandles": 1,
            "outputHandles": 0,
            "icon": "component.svg",
            "supportedGraphTypes": [
                "Connector"
            ],
            "description": "This node will render an image each time the connector is updated with a new image in base 64 format."
        },
        {
            "name": "camera controller",
            "backgroundColor": "#BD00FF",
            "inputHandles": 0,
            "outputHandles": 1,
            "icon": "component.svg",
            "supportedGraphTypes": [
                "Connector"
            ],
            "description": "This node implements the ICameraController interface that describes the event that will be triggered when a UI component that implements this connector is getting interacted by the user."
        }
    ]
}